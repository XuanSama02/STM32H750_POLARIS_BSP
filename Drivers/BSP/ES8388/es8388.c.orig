#include "es8388.h"
#include "myiic.h"
#include "delay.h"
#include "pcf8574.h"
//////////////////////////////////////////////////////////////////////////////////	 
//本程序只供学习使用，未经作者许可，不得用于其它任何用途
//ALIENTEK STM32H7开发板
//ES8388驱动代码	   
//正点原子@ALIENTEK
//技术论坛:www.openedv.com
//创建日期:2019/4/24
//版本：V1.0
//版权所有，盗版必究。
//Copyright(C) 广州市星翼电子科技有限公司 2014-2024
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	

//ES8388初始化
//返回值:0,初始化正常
//    其他,错误代码
u8 ES8388_Init(void)
{
	IIC_Init();                 	//初始化IIC接口
	PCF8574_WriteBit(MD_PD, 0);		//打开功放

	//软复位ES8388
	ES8388_Write_Reg(0, 0x80);
	ES8388_Write_Reg(0, 0x00);
	delay_ms(100);					//等待复位

	ES8388_Write_Reg(0x01, 0x58);
	ES8388_Write_Reg(0x01, 0x50);
	ES8388_Write_Reg(0x02, 0xF3);
	ES8388_Write_Reg(0x02, 0xF0);

	ES8388_Write_Reg(0x03, 0x09);	//麦克风偏置电源关闭
	ES8388_Write_Reg(0x00, 0x06);	//使能参考		500K驱动使能
	ES8388_Write_Reg(0x04, 0x00);	//DAC电源管理，不打开任何通道
	ES8388_Write_Reg(0x08, 0x00);	//MCLK不分频
	ES8388_Write_Reg(0x2B, 0x80);	//DAC控制	DACLRC与ADCLRC相同

	ES8388_Write_Reg(0x09, 0x88);	//ADC L/R PGA增益配置为+24dB
	ES8388_Write_Reg(0x0C, 0x4C);	//ADC	数据选择为left data = left ADC, right data = left ADC 	音频数据为16bit
	ES8388_Write_Reg(0x0D, 0x02);	//ADC配置 MCLK/采样率=256
	ES8388_Write_Reg(0x10, 0x00);	//ADC数字音量控制将信号衰减 L	设置为最小！！！
	ES8388_Write_Reg(0x11, 0x00);	//ADC数字音量控制将信号衰减 R	设置为最小！！！

	ES8388_Write_Reg(0x17, 0x18);	//DAC 音频数据为16bit
	ES8388_Write_Reg(0x18, 0x02);	//DAC	配置 MCLK/采样率=256
	ES8388_Write_Reg(0x1A, 0x00);	//DAC数字音量控制将信号衰减 L	设置为最小！！！
	ES8388_Write_Reg(0x1B, 0x00);	//DAC数字音量控制将信号衰减 R	设置为最小！！！
	ES8388_Write_Reg(0x27, 0xB8);	//L混频器
	ES8388_Write_Reg(0x2A, 0xB8);	//R混频器
	delay_ms(100);
	return 0;
}

//ES8388写寄存器
//reg:寄存器地址
//val:要写入寄存器的值 
//返回值:0,成功;
//    其他,错误代码
u8 ES8388_Write_Reg(u8 reg, u8 val)
{
	IIC_Start();
	IIC_Send_Byte((ES8388_ADDR << 1)|0); 	//发送器件地址+写命令
	if(IIC_Wait_Ack())return 1;				//等待应答(成功?/失败?)
	IIC_Send_Byte(reg);						//写寄存器地址
	if(IIC_Wait_Ack())return 2;				//等待应答(成功?/失败?)
	IIC_Send_Byte(val & 0XFF);				//发送数据
	if(IIC_Wait_Ack())return 3;				//等待应答(成功?/失败?)
	IIC_Stop();
	return 0;
}

//ES8388读寄存器
//reg:寄存器地址
//返回值:读到的数据
u8 ES8388_Read_Reg(u8 reg)
{
    u8 temp = 0;

    IIC_Start();
    IIC_Send_Byte((ES8388_ADDR << 1)|0); 	//发送器件地址+写命令
    if(IIC_Wait_Ack())return 1;				//等待应答(成功?/失败?)
    IIC_Send_Byte(reg);						//写寄存器地址
    if(IIC_Wait_Ack())return 1;				//等待应答(成功?/失败?)
    IIC_Start();
    IIC_Send_Byte((ES8388_ADDR << 1)|1); 	//发送器件地址+读命令
    if(IIC_Wait_Ack())return 1;				//等待应答(成功?/失败?)
    temp = IIC_Read_Byte(0);
    IIC_Stop();

    return temp;
}

//设置I2S工作模式
//fmt:0,飞利浦标准I2S;1,MSB(左对齐);2,LSB(右对齐);3,PCM/DSP
//len:0,24bit;1,20bit;2,18bit;3,16bit;4,32bit 
void ES8388_I2S_Cfg(u8 fmt, u8 len)
{
    fmt&=0X03;
    len&=0X07; //限定范围
    ES8388_Write_Reg(23,(fmt << 1)|(len << 3));	//R23,ES8388工作模式设置
}

//设置耳机音量
//volume:音量大小(0-33)
void ES8388_HPvol_Set(u8 volume)
{
	u8 i=0;
	if(volume > 30) 
		volume=30;
    for(i=0;i<volume;i++)
    {
        ES8388_Write_Reg(0x2E,i);
        ES8388_Write_Reg(0x2F,i);
    }
}

//设置耳机音量
//volume:音量大小(0-33)
void ES8388_SPKvol_Set(u8 volume)
{
	u8 i=0;
	if(volume > 30) 
		volume=30;
    for(i=0;i<volume;i++)
    {
        ES8388_Write_Reg(0x30,i);
        ES8388_Write_Reg(0x31,i);
    }
}

//ES8388 DAC/ADC配置
//dacen: dac使能(0)/关闭(1)
//adcen: adc使能(0)/关闭(1)
void ES8388_ADDA_Cfg(u8 dacen,u8 adcen)
{
	u8 res = 0;
	
	res|=(dacen<<0);
	res|=(adcen<<1);
	res|=(dacen<<2);
	res|=(adcen<<3);
	ES8388_Write_Reg(0x02,res);
}

//ES8388 DAC输出通道配置
//out: 0 通道2输出; 1 通道1输出
void ES8388_Output_Cfg(u8 out)
{
	ES8388_Write_Reg(0x04,3<<(out*2+2));
}

//ES8388 ADC输出通道配置
//in: 0 通道1输入; 1 通道2输入
void ES8388_Input_Cfg(u8 in)
{
	ES8388_Write_Reg(0x0A,(5*in)<<4);	//ADC1 输入通道选择L/R	INPUT1
}
